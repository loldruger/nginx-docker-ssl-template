services:
  init:
    container_name: init
    build: 
      context: ./services/init
      dockerfile: Dockerfile
    volumes:
      - ./docker-compose.yaml:/app/docker-compose.yaml
      - ./data/etc/nginx/conf.d/:/app/data/etc/nginx/conf.d/
      - .:/app
    user: root
    working_dir: /app
    env_file: .env

  nginx:
    container_name: nginx
    build:
      context: ./services/nginx
      dockerfile: Dockerfile
    restart: always
    ports:
      - "80:80/tcp"
      - "443:443"
    environment:
      keysize: 4096
      domains: ${DOMAINS}
    volumes:
      - ./data/etc/nginx/conf.d:/etc/nginx/conf.d
      - ./data/etc/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./data/etc/letsencrypt:/etc/letsencrypt
      - ./data/var/www/certbot:/var/www/certbot
      - ./services/nginx/nginx_init.sh:/nginx_init.sh
    depends_on:
      init:
        condition: service_completed_successfully
      backend_api:
        condition: service_started
      backend_web:
        condition: service_started
    networks:
      - backtier
    entrypoint: "/nginx_init.sh"

  certbot:
    container_name: certbot
    build:
      context: ./services/certbot
      dockerfile: Dockerfile
    restart: always
    volumes:
      - ./data/var/www/certbot:/var/www/certbot
      - ./data/var/www/certbot:/var/log/letsencrypt
      - ./data/etc/letsencrypt:/etc/letsencrypt
      - ./data/etc/nginx/conf.d:/etc/nginx/conf.d
      - ./services/certbot/certbot_init.sh:/certbot_init.sh
    environment:
      keysize: 4096
      email: ${EMAIL}
      domains: ${DOMAINS}
      staging: ${STAGING}
    depends_on: 
      - nginx
    entrypoint: "/certbot_init.sh"

  pg-admin:
    container_name: pgadmin4
    image: dpage/pgadmin4
    environment:
      VIRTUAL_HOST: ${PGADMIN_DOMAIN}
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_PORT: 9090
    ports:
      - "8070:9090"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - backtier
      
  postgres:
    container_name: postgres
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backtier

  redis:
    container_name: redis
    image: redis:alpine
    restart: always
    networks:
      - backtier

  backend_api:
    container_name: backend_api
    ports:
      - "8080:8080"
    build:
      context: ./services/backend_api
      dockerfile: Dockerfile
    environment:
      VIRTUAL_HOST: ${API_DOMAIN}
      DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DATABASE}
      REDIS_URL: redis://redis
    volumes:
      - ./services/backend_api:/home/work
      - rust_data:/root/.cargo/registry
    networks:
      - backtier

  backend_web:
    container_name: backend_web
    ports:
      - "8081:8081"
    build:
      context: ./services/backend_web
      dockerfile: Dockerfile
    environment:
      VIRTUAL_HOST: ${WEB_DOMAIN}
    volumes:
      - ./services/backend_web:/home/work
      - rust_data:/root/.cargo/registry
    networks:
      - backtier

volumes:
  pgadmin_data:
  postgres_data:
  rust_data:

networks:
  backtier:
  #  driver: bridge
  #  driver_opts:
  #    com.docker.network.driver.mtu: 1450
