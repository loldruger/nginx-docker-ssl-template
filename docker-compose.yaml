version: '3'

services:
  nginx:
    container_name: nginx
    image: nginx
    restart: always
    ports:
      - "80:80/tcp"
      - "443:443"
    environment:
      keysize: 4096
      domains: ${DOMAINS}
    volumes:
      - ./data/etc/nginx/conf.d:/etc/nginx/conf.d
      - ./data/etc/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./data/var/www/certbot:/var/www/certbot
      - ./data/etc/letsencrypt:/etc/letsencrypt
    depends_on:
      - backend
    networks:
      - backtier
    entrypoint:
      - /bin/sh
      - -c
      - |
        echo "--------------------------------------------------------------------------------------------"
        [-] nginx init
        echo "--------------------------------------------------------------------------------------------"
        echo 
        [ ! -d "/etc/letsencrypt" ] && mkdir /etc/letsencrypt
        for domain in $$domains; do
          if [ ! -f "/etc/nginx/conf.d/$$domain.conf" ]; then
            echo "
            server {
              listen 80;
              server_name $$domain;
              server_tokens off;
              http2 on;
              
              location /.well-known/acme-challenge/ {
                  root /var/www/certbot;
              }

              location / {
                  return 301 https://$host$request_uri;
              }
            }
            " > /etc/nginx/conf.d/$$domain.conf
          fi

          echo [-] $$domain \(keysize: $$keysize\)
          echo
          
          [ -d "/etc/letsencrypt/staging/$$domain" ] || mkdir -p /etc/letsencrypt/staging/$$domain
          if [ ! -f "/etc/letsencrypt/staging/$$domain/privkey.pem" ] || [ ! -f "/etc/letsencrypt/staging/$$domain/fullchain.pem" ]; then
            sed -i 's/live/staging/g' /etc/nginx/conf.d/$$domain.conf
            openssl req -x509 -nodes -newkey rsa:$$keysize -days 1 -keyout "/etc/letsencrypt/staging/$$domain/privkey.pem" -out "/etc/letsencrypt/staging/$$domain/fullchain.pem" -subj "/CN=localhost"
            echo
          fi
          sleep 5s
        done
        if [ ! -f "/etc/letsencrypt/ssl-dhparams.pem" ]; then
          curl -s https://raw.githubusercontent.com/certbot/certbot/master/certbot/certbot/ssl-dhparams.pem > "/etc/letsencrypt/ssl-dhparams.pem"
          echo 
        fi
        if [ ! -f "/etc/nginx/options-ssl-nginx.conf" ]; then
          curl -s https://raw.githubusercontent.com/certbot/certbot/master/certbot-nginx/certbot_nginx/_internal/tls_configs/options-ssl-nginx.conf > "/etc/nginx/options-ssl-nginx.conf"
          echo 
        fi
        echo "--------------------------------------------------------------------------------------------"
        echo [-] nginx-watch-reload init
        echo "--------------------------------------------------------------------------------------------"
        while :
        do
          for domain in $$domains; do
            [ ! -f "/etc/letsencrypt/live/$$domain/.certbot" ] && nginx -s reload
          done
          sleep 30s
        done & nginx -g "daemon off;"
        echo "--------------------------------------------------------------------------------------------"
        echo
  certbot:
    container_name: certbot
    image: certbot/certbot:latest
    restart: "no"
    volumes:
      - ./data/var/www/certbot:/var/www/certbot
      - ./data/etc/letsencrypt:/etc/letsencrypt
      - ./data/etc/nginx/conf.d:/etc/nginx/conf.d
    environment:
      keysize: 4096
      email: ${EMAIL}
      domains: ${DOMAINS}
      staging: ${STAGING}
    entrypoint:
      - /bin/sh
      - -c
      - |
        echo [-] sleep 30s
        sleep 30s
        echo "--------------------------------------------------------------------------------------------"
        echo [-] certbot init
        echo "--------------------------------------------------------------------------------------------"
        echo 

        [ -f /etc/nginx/conf.d/$$domain.conf ] || touch /etc/nginx/conf.d/$$domain.conf

        for domain in $$domains; do
          echo [-] $$domain \(keysize: $$keysize\)
          echo
          [ -d "/etc/letsencrypt/staging/$$domain" ] || mkdir -p /etc/letsencrypt/staging
          [ -d "/etc/letsencrypt/renewal/$$domain" ] || mkdir -p /etc/letsencrypt/renewal
          [ -d "/etc/letsencrypt/live/$$domain" ] || mkdir -p /etc/letsencrypt/live

          if [ "$$staging" = "false" ] && [ ! -f "/etc/letsencrypt/live/$$domain/.certbot" ]; then
            echo [-] $$domain staging false
            certbot certonly -v --webroot -w /var/www/certbot -d $$domain --email $$email --rsa-key-size $$keysize --agree-tos --force-renewal
            touch /etc/letsencrypt/live/$$domain/.certbot
            sed -i 's/staging/live/g' /etc/nginx/conf.d/$$domain.conf
            echo [-] --- complete --- $$domain
            sleep 5s
          fi
          if [ "$$staging" = "true" ] && [ ! -f "/etc/letsencrypt/live/$$domain/.certbot" ]; then
            echo [-] $$domain staging true
            certbot certonly -v --staging --webroot -w /var/www/certbot -d $$domain --email $$email --rsa-key-size $$keysize --agree-tos --force-renewal
            touch /etc/letsencrypt/live/$$domain/.certbot
            sed -i 's/staging/live/g' /etc/nginx/conf.d/$$domain.conf
            echo [-] --- complete --- $$domain
            sleep 5s
          fi
          
          if [ -f /etc/nginx/conf.d/$$domain ]; then 
            rm /etc/nginx/conf.d/$$domain
          fi
          
          echo "
          server {
            listen 80;
            server_name $$domain;
            server_tokens off;
            http2 on;
            
            location /.well-known/acme-challenge/ {
                root /var/www/certbot;
            }

            location / {
                return 301 https://$host$request_uri;
            }
          }
          
          server { 
            listen 443 ssl;
            server_name $$domain;
            server_tokens off;
            http2 on;

            ssl_certificate /etc/letsencrypt/live/$$domain/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/$$domain/privkey.pem;
            include /etc/nginx/options-ssl-nginx.conf;
            ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

            location / {
                proxy_pass  http://api;
                # proxy_set_header    Host                $http_host;
                # proxy_set_header    X-Real-IP           $remote_addr;
                # proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
            }
          }" > /etc/nginx/conf.d/$$domain.conf

        done

        echo "--------------------------------------------------------------------------------------------"
        echo [-] certbot init renew timer
        echo "--------------------------------------------------------------------------------------------"
        echo 
        trap exit TERM
 
        while :
        do
          echo [-] certbot renew
          [ -d "/etc/letsencrypt/renewal" ] && ls -l /etc/letsencrypt/renewal
          certbot renew
          [ -f "/etc/letsencrypt/live/$$domain/.certbot" ] || touch /etc/letsencrypt/live/$$domain/.certbot
          echo [-] sleep 12h
          sleep 12h
        done

    depends_on: 
      - nginx

  pg-admin:
    container_name: pgadmin4
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_PORT: 9090
    ports:
      - "8070:9090"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - backtier
      
  postgres:
    container_name: postgres
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backtier

  redis:
    container_name: redis
    image: redis:alpine
    restart: always
    networks:
      - backtier

  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DATABASE}
      REDIS_URL: redis://redis
    volumes:
      - ./backend:/home/work
      - rust_data:/root/.cargo/registry
    # links:
    #   - postgres
    #   - redis
    networks:
      - backtier

volumes:
  pgadmin_data:
  postgres_data:
  rust_data:
  
networks:
  backtier:
  #  driver: bridge
  #  driver_opts:
  #    com.docker.network.driver.mtu: 1450
